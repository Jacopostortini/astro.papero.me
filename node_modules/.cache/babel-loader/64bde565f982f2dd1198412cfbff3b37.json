{"remainingRequest":"/media/jacopo/VolumeDati/Documenti/papero.tk/cosmos.papero.me/node_modules/thread-loader/dist/cjs.js!/media/jacopo/VolumeDati/Documenti/papero.tk/cosmos.papero.me/node_modules/babel-loader/lib/index.js!/media/jacopo/VolumeDati/Documenti/papero.tk/cosmos.papero.me/node_modules/eslint-loader/index.js??ref--13-0!/media/jacopo/VolumeDati/Documenti/papero.tk/cosmos.papero.me/src/phaser/RankingScene.js","dependencies":[{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/cosmos.papero.me/src/phaser/RankingScene.js","mtime":1617793602633},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/cosmos.papero.me/node_modules/cache-loader/dist/cjs.js","mtime":1616495189815},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/cosmos.papero.me/node_modules/thread-loader/dist/cjs.js","mtime":1616495190967},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/cosmos.papero.me/node_modules/babel-loader/lib/index.js","mtime":1616495189787},{"path":"/media/jacopo/VolumeDati/Documenti/papero.tk/cosmos.papero.me/node_modules/eslint-loader/index.js","mtime":1616495190059}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL21lZGlhL2phY29wby9Wb2x1bWVEYXRpL0RvY3VtZW50aS9wYXBlcm8udGsvY29zbW9zLnBhcGVyby5tZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL21lZGlhL2phY29wby9Wb2x1bWVEYXRpL0RvY3VtZW50aS9wYXBlcm8udGsvY29zbW9zLnBhcGVyby5tZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9tZWRpYS9qYWNvcG8vVm9sdW1lRGF0aS9Eb2N1bWVudGkvcGFwZXJvLnRrL2Nvc21vcy5wYXBlcm8ubWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICIvbWVkaWEvamFjb3BvL1ZvbHVtZURhdGkvRG9jdW1lbnRpL3BhcGVyby50ay9jb3Ntb3MucGFwZXJvLm1lL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiL21lZGlhL2phY29wby9Wb2x1bWVEYXRpL0RvY3VtZW50aS9wYXBlcm8udGsvY29zbW9zLnBhcGVyby5tZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaWduLmpzIjsKaW1wb3J0IFBoYXNlciBmcm9tICJwaGFzZXIiOwppbXBvcnQgeyBnYW1lRGltZW5zaW9ucywgc2NlbmVLZXlzIH0gZnJvbSAiLi4vY29uc3RhbnRzL2dhbWVTZXR0aW5ncyI7CmltcG9ydCB3ZWJzb2NrZXRFdmVudHMgZnJvbSAiLi4vY29uc3RhbnRzL3dlYnNvY2tldEV2ZW50cyI7Cgp2YXIgUmFua2luZ1NjZW5lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGhhc2VyJFNjZW5lKSB7CiAgX2luaGVyaXRzKFJhbmtpbmdTY2VuZSwgX1BoYXNlciRTY2VuZSk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUmFua2luZ1NjZW5lKTsKCiAgZnVuY3Rpb24gUmFua2luZ1NjZW5lKHNvY2tldCwgcG9pbnRzVG9XaW4pIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmFua2luZ1NjZW5lKTsKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHsKICAgICAga2V5OiBzY2VuZUtleXMucmFua2luZwogICAgfSk7CiAgICBfdGhpcy5zb2NrZXQgPSBzb2NrZXQ7CiAgICBfdGhpcy5wb2ludHNUb1dpbiA9IHBvaW50c1RvV2luOwogICAgX3RoaXMuc3BlZWQgPSAzMDA7CiAgICBfdGhpcy5hbmd1bGFyU3BlZWQgPSAxMjAwOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFJhbmtpbmdTY2VuZSwgW3sKICAgIGtleTogImluaXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoZGF0YSkgewogICAgICB0aGlzLnBsYXllcnMgPSBkYXRhLnBsYXllcnM7CiAgICAgIHRoaXMudGltZXIgPSBkYXRhLnRpbWVyOwogICAgICB0aGlzLmJhbmRXaWR0aCA9IGdhbWVEaW1lbnNpb25zLndpZHRoIC8gKHRoaXMucG9pbnRzVG9XaW4gKyAxKTsKICAgICAgdGhpcy5saW5lSGVpZ2h0ID0gZ2FtZURpbWVuc2lvbnMuaGVpZ2h0IC8gdGhpcy5wbGF5ZXJzLmxlbmd0aDsKICAgICAgdGhpcy5wbGF5ZXJzU3RvcHBlZCA9IDA7CiAgICB9CiAgfSwgewogICAga2V5OiAicHJlbG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlbG9hZCgpIHsKICAgICAgdGhpcy5sb2FkLmltYWdlKCJzaGlwMCIsICIuL3NoaXBzL3NoaXAwLnBuZyIpOwogICAgICB0aGlzLmxvYWQuaW1hZ2UoInNoaXAxIiwgIi4vc2hpcHMvc2hpcDEucG5nIik7CiAgICAgIHRoaXMubG9hZC5pbWFnZSgic2hpcDIiLCAiLi9zaGlwcy9zaGlwMi5wbmciKTsKICAgICAgdGhpcy5sb2FkLmltYWdlKCJzaGlwMyIsICIuL3NoaXBzL3NoaXAzLnBuZyIpOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHRoaXMuc29ja2V0Lm9uKHdlYnNvY2tldEV2ZW50cy5TVEFSVF9UVVJOLCBmdW5jdGlvbiAoZ2FtZSkgewogICAgICAgIGNvbnNvbGUubG9nKCJzdGFydCB0dXJuIGV2ZW50IiwgX29iamVjdFNwcmVhZCh7fSwgZ2FtZSkpOwoKICAgICAgICBfdGhpczIuc2NlbmUuc3RhcnQoc2NlbmVLZXlzLmdhbWUsIF9vYmplY3RTcHJlYWQoe30sIGdhbWUpKTsKICAgICAgfSk7CiAgICAgIHRoaXMuZHJhd0ZpbmlzaExpbmUoKTsKICAgICAgdGhpcy5jcmVhdGVTaGlwcygpOwogICAgICB0aGlzLnNldFNoaXBzTW92ZW1lbnRzKCk7CiAgICAgIHRoaXMuc2NlbmUucGF1c2UoKTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMyLnNjZW5lLnJlc3VtZSgpOwogICAgICB9LCAxMDAwKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ1cGRhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICBpZiAodGhpcy50aW1lciA+IERhdGUubm93KCkpIHsKICAgICAgICB0aGlzLnNvY2tldC5lbWl0KHdlYnNvY2tldEV2ZW50cy5TVEFSVF9UVVJOKTsKICAgICAgICB0aGlzLnNjZW5lLnBhdXNlKCk7CiAgICAgIH0KCiAgICAgIHRoaXMucGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHsKICAgICAgICB2YXIgdGFyZ2V0ID0gX3RoaXMzLmJhbmRXaWR0aCAqIChwbGF5ZXIudG8gKyAwLjUpOwoKICAgICAgICBpZiAocGxheWVyLnNoaXAueCA+PSB0YXJnZXQgJiYgcGxheWVyLnNoaXAuYm9keS52ZWxvY2l0eS54ID4gMCB8fCBwbGF5ZXIuc2hpcC54IDw9IHRhcmdldCAmJiBwbGF5ZXIuc2hpcC5ib2R5LnZlbG9jaXR5LnggPCAwKSB7CiAgICAgICAgICBwbGF5ZXIuc2hpcC5zZXRWZWxvY2l0eVgoMCk7CiAgICAgICAgICBwbGF5ZXIuc2hpcC5zZXRBbmd1bGFyVmVsb2NpdHkoMCk7CiAgICAgICAgICBfdGhpczMucGxheWVyc1N0b3BwZWQrKzsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgaWYgKHRoaXMucGxheWVyc1N0b3BwZWQgPj0gdGhpcy5wbGF5ZXJzLmxlbmd0aCkgewogICAgICAgIHRoaXMuc2NlbmUucGF1c2UoKTsKICAgICAgICBjb25zb2xlLmxvZygicmVhZHkgZW1pdHRlZCIpOwogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXMzLnNvY2tldC5lbWl0KHdlYnNvY2tldEV2ZW50cy5SRUFEWV9UVVJOKTsKICAgICAgICB9LCAxMDAwKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImRyYXdGaW5pc2hMaW5lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3RmluaXNoTGluZSgpIHsKICAgICAgdmFyIGdyYXBoaWNzID0gdGhpcy5hZGQuZ3JhcGhpY3MoKTsKICAgICAgdmFyIG51bWJlck9mU3F1YXJlcyA9IDM7CiAgICAgIHZhciBzcXVhcmVEaW0gPSB0aGlzLmJhbmRXaWR0aCAvIG51bWJlck9mU3F1YXJlczsKICAgICAgdmFyIHggPSB0aGlzLmJhbmRXaWR0aCAqIHRoaXMucG9pbnRzVG9XaW47CiAgICAgIHZhciB5ID0gMDsKICAgICAgdmFyIGN1cnJlbnRDb2xvciA9IDB4MDsKCiAgICAgIHdoaWxlICh5IDwgZ2FtZURpbWVuc2lvbnMuaGVpZ2h0KSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZlNxdWFyZXM7IGkrKykgewogICAgICAgICAgZ3JhcGhpY3MuZmlsbFN0eWxlKGN1cnJlbnRDb2xvciwgMS4wKTsKICAgICAgICAgIGdyYXBoaWNzLmZpbGxSZWN0KHggKyBzcXVhcmVEaW0gKiBpLCB5LCBzcXVhcmVEaW0sIHNxdWFyZURpbSk7CiAgICAgICAgICBjdXJyZW50Q29sb3IgPSBjdXJyZW50Q29sb3IgPT09IDB4MCA/IDB4Q0NDQ0NDIDogMHgwOwogICAgICAgIH0KCiAgICAgICAgeSArPSBzcXVhcmVEaW07CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjcmVhdGVTaGlwcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlU2hpcHMoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdGhpcy5wbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKHBsYXllciwgaW5kZXgpIHsKICAgICAgICBwbGF5ZXIuc2hpcCA9IF90aGlzNC5waHlzaWNzLmFkZC5zcHJpdGUoX3RoaXM0LmJhbmRXaWR0aCAqIChwbGF5ZXIuZnJvbSArIDAuNSksIF90aGlzNC5saW5lSGVpZ2h0ICogKGluZGV4ICsgMC41KSwgInNoaXAiICsgcGxheWVyLmNvbG9yKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0U2hpcHNNb3ZlbWVudHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNoaXBzTW92ZW1lbnRzKCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHRoaXMucGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChwbGF5ZXIpIHsKICAgICAgICBwbGF5ZXIuc2hpcC5zZXRWZWxvY2l0eVgoTWF0aC5zaWduKHBsYXllci50byAtIHBsYXllci5mcm9tKSAqIF90aGlzNS5zcGVlZCk7CgogICAgICAgIGlmIChwbGF5ZXIudG8gPCBwbGF5ZXIuZnJvbSkgewogICAgICAgICAgcGxheWVyLnNoaXAuc2V0QW5ndWxhclZlbG9jaXR5KF90aGlzNS5hbmd1bGFyU3BlZWQpOwogICAgICAgIH0gZWxzZSBpZiAocGxheWVyLnRvID09PSBwbGF5ZXIuZnJvbSkgX3RoaXM1LnBsYXllcnNTdG9wcGVkKys7CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFJhbmtpbmdTY2VuZTsKfShQaGFzZXIuU2NlbmUpOwoKZXhwb3J0IHsgUmFua2luZ1NjZW5lIGFzIGRlZmF1bHQgfTs="},{"version":3,"sources":["/media/jacopo/VolumeDati/Documenti/papero.tk/cosmos.papero.me/src/phaser/RankingScene.js"],"names":["Phaser","gameDimensions","sceneKeys","websocketEvents","RankingScene","socket","pointsToWin","key","ranking","speed","angularSpeed","data","players","timer","bandWidth","width","lineHeight","height","length","playersStopped","load","image","on","START_TURN","game","console","log","scene","start","drawFinishLine","createShips","setShipsMovements","pause","setTimeout","resume","Date","now","emit","forEach","player","target","to","ship","x","body","velocity","setVelocityX","setAngularVelocity","READY_TURN","graphics","add","numberOfSquares","squareDim","y","currentColor","i","fillStyle","fillRect","index","physics","sprite","from","color","Math","sign","Scene"],"mappings":"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","sourcesContent":["import Phaser from \"phaser\";\nimport {gameDimensions, sceneKeys} from \"../constants/gameSettings\";\nimport websocketEvents from \"../constants/websocketEvents\";\n\nexport default class RankingScene extends Phaser.Scene {\n\n    constructor(socket, pointsToWin) {\n        super({key: sceneKeys.ranking});\n\n        this.socket = socket;\n        this.pointsToWin = pointsToWin;\n\n        this.speed = 300;\n        this.angularSpeed = 1200;\n    }\n\n    init(data){\n        this.players = data.players;\n        this.timer = data.timer;\n        this.bandWidth = gameDimensions.width / (this.pointsToWin+1);\n        this.lineHeight = gameDimensions.height / this.players.length;\n        this.playersStopped = 0;\n    }\n\n    preload(){\n        this.load.image(\"ship0\", \"./ships/ship0.png\");\n        this.load.image(\"ship1\", \"./ships/ship1.png\");\n        this.load.image(\"ship2\", \"./ships/ship2.png\");\n        this.load.image(\"ship3\", \"./ships/ship3.png\");\n    }\n\n    create(){\n        this.socket.on(websocketEvents.START_TURN, game => {\n            console.log(\"start turn event\", {...game});\n            this.scene.start(sceneKeys.game, {...game});\n        });\n\n        this.drawFinishLine();\n\n        this.createShips();\n\n        this.setShipsMovements();\n        this.scene.pause();\n        setTimeout(()=>{\n            this.scene.resume();\n        }, 1000);\n\n    }\n\n    update(){\n        if(this.timer>Date.now()) {\n            this.socket.emit(websocketEvents.START_TURN);\n            this.scene.pause();\n        }\n        this.players.forEach(player => {\n            const target = this.bandWidth * (player.to+0.5);\n            if(\n                (player.ship.x >= target && player.ship.body.velocity.x > 0) ||\n                (player.ship.x <= target && player.ship.body.velocity.x < 0)\n            ) {\n                player.ship.setVelocityX(0);\n                player.ship.setAngularVelocity(0);\n                this.playersStopped++;\n            }\n        });\n        if(this.playersStopped >= this.players.length) {\n            this.scene.pause();\n            console.log(\"ready emitted\");\n            setTimeout(()=>{\n                this.socket.emit(websocketEvents.READY_TURN);\n            }, 1000);\n        }\n    }\n\n    drawFinishLine(){\n        const graphics = this.add.graphics();\n        const numberOfSquares = 3;\n        const squareDim = this.bandWidth / numberOfSquares;\n        let x = this.bandWidth * this.pointsToWin;\n        let y = 0;\n        let currentColor = 0x0\n        while( y < gameDimensions.height){\n            for(let i = 0; i < numberOfSquares; i++){\n                graphics.fillStyle(currentColor, 1.0);\n                graphics.fillRect(x+squareDim*i, y, squareDim, squareDim);\n                currentColor = currentColor === 0x0 ? 0xCCCCCC : 0x0;\n            }\n\n            y += squareDim;\n        }\n    }\n\n    createShips(){\n        this.players.forEach((player, index) => {\n            player.ship = this.physics.add.sprite(this.bandWidth * (player.from+0.5), this.lineHeight * (index+0.5), \"ship\"+player.color);\n        });\n    }\n\n    setShipsMovements(){\n        this.players.forEach(player => {\n            player.ship.setVelocityX(Math.sign(player.to-player.from) * this.speed);\n            if(player.to < player.from){\n                player.ship.setAngularVelocity(this.angularSpeed);\n            } else if(player.to === player.from) this.playersStopped++;\n        });\n    }\n}"]}]}